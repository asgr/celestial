// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// potential_part
NumericVector potential_part(NumericMatrix part, Nullable<NumericMatrix> eval, NumericVector mass, double soft, double Munit, double Lunit, double Vunit);
RcppExport SEXP _celestial_potential_part(SEXP partSEXP, SEXP evalSEXP, SEXP massSEXP, SEXP softSEXP, SEXP MunitSEXP, SEXP LunitSEXP, SEXP VunitSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type part(partSEXP);
    Rcpp::traits::input_parameter< Nullable<NumericMatrix> >::type eval(evalSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type mass(massSEXP);
    Rcpp::traits::input_parameter< double >::type soft(softSEXP);
    Rcpp::traits::input_parameter< double >::type Munit(MunitSEXP);
    Rcpp::traits::input_parameter< double >::type Lunit(LunitSEXP);
    Rcpp::traits::input_parameter< double >::type Vunit(VunitSEXP);
    rcpp_result_gen = Rcpp::wrap(potential_part(part, eval, mass, soft, Munit, Lunit, Vunit));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_celestial_potential_part", (DL_FUNC) &_celestial_potential_part, 7},
    {NULL, NULL, 0}
};

RcppExport void R_init_celestial(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
